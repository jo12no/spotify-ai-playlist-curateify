""" The main entrypoint for the spotify-ai-playlist-curateify application. 
"""

import os
import re

from core import gemini_requester, gpt_requester, spotify_requester, spotify_service


class InputHandler:
    """
    Handles various input sources to generate a list of tracks.
    This includes reading from a file, fetching from GPT or Gemini models,
    or directly using Spotify artist IDs or URLs.
    """

    @staticmethod
    def tracklist_from_file(filename="list_of_tracks.txt"):
        """
        Reads a list of tracks from a specified file.

        Args:
            filename (str): The name of the file containing the tracklist.

        Returns:
            list: A sorted list of tracks read from the file.
        """
        try:
            file_dir = os.path.join(
                os.path.dirname(os.path.abspath(__file__)), filename
            )
            tracks_to_add = []
            with open(file_dir, "r") as f:
                for line in f.readlines():
                    tracks_to_add.append(line.strip())
            tracks_to_add = sorted(tracks_to_add)
            print(*tracks_to_add, sep="\n")

            return tracks_to_add
        except Exception as e:
            print(f"Error reading from file {filename}: {e}")
            raise

    @staticmethod
    def tracklist_from_gpt():
        """
        Fetches a list of tracks generated by the GPT model.

        Returns:
            list: A list of tracks recommended by the GPT model.
        """
        try:
            gpt = gpt_requester.GptFetcher()
            tracks_to_add = gpt.fetch_gpt_response().split("\n")  # str into list
            print(*tracks_to_add, sep="\n")
            return tracks_to_add
        except Exception as e:
            print(f"Error fetching tracks from GPT: {e}")
            raise

    @staticmethod
    def tracklist_from_gemini():
        """
        Fetches a list of tracks generated by the Gemini model.

        Returns:
            list: A list of tracks recommended by the Gemini model.
        """
        try:
            gemini = gemini_requester.GeminiFetcher()
            tracks_to_add = gemini.fetch_gemini_response().split("\n")
            print(*tracks_to_add, sep="\n")
            return tracks_to_add
        except Exception as e:
            print(f"Error fetching tracks from Vertex: {e}")
            raise

    @staticmethod
    def extract_artist_id_from_url(url):
        """
        Extracts and returns the Spotify artist ID from a given URL.

        Args:
            url (str): The Spotify URL containing the artist ID.

        Returns:
            list: A list containing the Spotify artist ID, or None if invalid.
        """
        # Define the regular expression pattern to extract the artist ID
        pattern = r"https://open\.spotify\.com/artist/([0-9a-zA-Z]+)"

        # Use the re.search() function to find a match
        match = re.search(pattern, url)

        if match:
            # If a match is found, return the first captured group. List format for sp.
            return [match.group(1)]
        else:
            # Return None if no valid ID is found
            return None

    @staticmethod
    def extract_playlist_id_from_url(url):
        """
        Extracts and returns the Spotify playlist ID from a given URL.

        Args:
            url (str): The Spotify URL containing the playlist ID.

        Returns:
            list: A list containing the Spotify playlist ID, or None if invalid.
        """
        # Define the regular expression pattern to extract the playlist ID
        pattern = r"https://open\.spotify\.com/playlist/([0-9a-zA-Z]+)"

        # Use the re.search() function to find a match
        match = re.search(pattern, url)

        if match:
            # If a match is found, return the first captured group. Str format for sp.
            return match.group(1)
        else:
            # Return None if no valid ID is found
            return None

    @staticmethod
    def tracklist_from_spotify(service):
        """
        Generates a tracklist based on a Spotify artist ID or URL.

        Args:
            service: An instance of SpotifyService to interact with Spotify API.

        Returns:
            tuple: A tuple indicating to skip track ID search, and the track IDs.
        """
        seed = [
            input(
                'Enter a Spotify artist id (or paste "share artist" url, eg: https://open.spotify.com/artist/id) > '
            ).strip()
        ]

        if "https://open.spotify.com/artist/" in seed[0]:
            seed = InputHandler().extract_artist_id_from_url(seed[0])

        track_ids_to_add = spotify_requester.SpotifyFetcher().fetch_spotify_response(
            service, seed=seed
        )
        return "skip_track_search", track_ids_to_add

    @staticmethod
    def fetch_tracklist(input_source, service):
        """
        Fetches a tracklist based on the selected input source.

        Args:
            input_source (str): The chosen source of track data.
            service: An instance of SpotifyService to interact with Spotify API.

        Returns:
            list: A list of tracks from the chosen source.

        Raises:
            ValueError: If an invalid input source is provided.
        """
        if input_source in ["f", "file"]:
            return InputHandler.tracklist_from_file()
        elif input_source in ["g", "gpt"]:
            return InputHandler.tracklist_from_gpt()
        elif input_source in ["v", "vertex"]:
            return InputHandler.tracklist_from_gemini()
        elif input_source in ["sp", "s", "spotify"]:
            return InputHandler.tracklist_from_spotify(service)
        else:
            raise ValueError("Invalid user input.")

    @staticmethod
    def skip_track_id_search():
        """
        Determines whether to skip searching for track IDs. If the input tracks are
        from Spotify, it's already in track ID form.

        Returns:
            bool: True if track ID search should be skipped, False otherwise.
        """
        return True

    @staticmethod
    def processing_by_track_or_artist():
        """
        Determines whether to process tracks by individual track or by artist.

        Returns:
            bool: True if processing by artist, False if by track.
        """
        choice = input("Process by track (enter to continue) or [a]rtist? > ").lower()
        if choice in ["a"]:
            return True
        else:
            return False

    @staticmethod
    def create_new_playlist_or_existing():
        """
        Determines whether to create a new playlist or use an existing one.

        Returns:
            bool: True if using an existing playlist, False if creating a new one.
        """
        choice = input(
            "Create new playlist (enter to continue) or use [e]xisting? > "
        ).lower()
        if choice in ["e"]:
            return True
        else:
            return False


def main():
    """
    Entry: main function to execute the workflow.
    It handles user inputs, fetches tracklists, and adds tracks to a Spotify playlist.
    """
    service = spotify_service.SpotifyService()

    input_source = input(
        "\nSelect data source: from [f]ile or [g]pt or [v]ertex or [s]potify > "
    )
    print("\n===")
    input_handler = InputHandler()
    tracks_to_add = input_handler.fetch_tracklist(input_source, service)

    if input("     ^ Returned list.. happy to proceed? [y]   [n or q] > ") != "y":
        print("Quitting..")
        quit()

    print("\n===")
    use_existing_playlist = input_handler.create_new_playlist_or_existing()
    if use_existing_playlist:
        playlist_id = input(
            "Enter the existing playlist ID or url (eg: https://open.spotify.com/playlist/id) > "
        ).strip()

        if "https://open.spotify.com/playlist/" in playlist_id:
            playlist_id = InputHandler().extract_playlist_id_from_url(playlist_id)
    else:
        playlist_id = (
            service.create_playlist_and_return_id()
        )  # using user input as the name

    print(f"Proceeding with playlist: {playlist_id}.")
    """
    Skip if results are from spotify. 
    Set is used to remove duplicates from the results list. 
    """
    if isinstance(tracks_to_add, list):
        by_artist = input_handler.processing_by_track_or_artist()
        if by_artist:
            track_ids = service.process_tracks_by_artist(list(set(tracks_to_add)))
        else:
            track_ids = service.process_tracks(list(set(tracks_to_add)))
    else:
        # Input from spotify (via tuple)...  skip trackId lookup.
        track_ids = tracks_to_add[1]

    print("\n===")
    service.add_track_ids_to_playlist(track_ids, playlist_id)


if __name__ == "__main__":
    main()
